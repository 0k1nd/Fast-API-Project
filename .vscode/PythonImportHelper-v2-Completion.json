[
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "bet",
        "importPath": "bet_maker.dto",
        "description": "bet_maker.dto",
        "isExtraImport": true,
        "detail": "bet_maker.dto",
        "documentation": {}
    },
    {
        "label": "bet",
        "importPath": "bet_maker.dto",
        "description": "bet_maker.dto",
        "isExtraImport": true,
        "detail": "bet_maker.dto",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "bet_maker.database",
        "description": "bet_maker.database",
        "isExtraImport": true,
        "detail": "bet_maker.database",
        "documentation": {}
    },
    {
        "label": "Sessionlocal",
        "importPath": "bet_maker.database",
        "description": "bet_maker.database",
        "isExtraImport": true,
        "detail": "bet_maker.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "bet_maker.database",
        "description": "bet_maker.database",
        "isExtraImport": true,
        "detail": "bet_maker.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "bet_maker.database",
        "description": "bet_maker.database",
        "isExtraImport": true,
        "detail": "bet_maker.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "bet_maker.database",
        "description": "bet_maker.database",
        "isExtraImport": true,
        "detail": "bet_maker.database",
        "documentation": {}
    },
    {
        "label": "bet_maker",
        "importPath": "bet_maker.services",
        "description": "bet_maker.services",
        "isExtraImport": true,
        "detail": "bet_maker.services",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "Bet",
        "importPath": "bet_maker.models",
        "description": "bet_maker.models",
        "isExtraImport": true,
        "detail": "bet_maker.models",
        "documentation": {}
    },
    {
        "label": "EventStatusEnum",
        "importPath": "bet_maker.dto.bet",
        "description": "bet_maker.dto.bet",
        "isExtraImport": true,
        "detail": "bet_maker.dto.bet",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DECIMAL",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "CheckConstraint",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "bet_maker",
        "importPath": "bet_maker.routers",
        "description": "bet_maker.routers",
        "isExtraImport": true,
        "detail": "bet_maker.routers",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "line_provider.database",
        "description": "line_provider.database",
        "isExtraImport": true,
        "detail": "line_provider.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "line_provider.database",
        "description": "line_provider.database",
        "isExtraImport": true,
        "detail": "line_provider.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "line_provider.database",
        "description": "line_provider.database",
        "isExtraImport": true,
        "detail": "line_provider.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "line_provider.database",
        "description": "line_provider.database",
        "isExtraImport": true,
        "detail": "line_provider.database",
        "documentation": {}
    },
    {
        "label": "line_provider",
        "importPath": "line_provider.services",
        "description": "line_provider.services",
        "isExtraImport": true,
        "detail": "line_provider.services",
        "documentation": {}
    },
    {
        "label": "event",
        "importPath": "line_provider.dto",
        "description": "line_provider.dto",
        "isExtraImport": true,
        "detail": "line_provider.dto",
        "documentation": {}
    },
    {
        "label": "event",
        "importPath": "line_provider.dto",
        "description": "line_provider.dto",
        "isExtraImport": true,
        "detail": "line_provider.dto",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "line_provider.models",
        "description": "line_provider.models",
        "isExtraImport": true,
        "detail": "line_provider.models",
        "documentation": {}
    },
    {
        "label": "line_provider",
        "importPath": "line_provider.routers",
        "description": "line_provider.routers",
        "isExtraImport": true,
        "detail": "line_provider.routers",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "Bet",
        "kind": 6,
        "importPath": "bet_maker.dto.bet",
        "description": "bet_maker.dto.bet",
        "peekOfCode": "class Bet(BaseModel):\n    event_id: int\n    amount: float\n    is_win: Optional[bool]\n    class Config:\n        from_attributes = True\nclass EventStatusEnum(str, Enum):\n    win = \"1win\"\n    loss = \"2win\"\nclass BetWebhooks(BaseModel):",
        "detail": "bet_maker.dto.bet",
        "documentation": {}
    },
    {
        "label": "EventStatusEnum",
        "kind": 6,
        "importPath": "bet_maker.dto.bet",
        "description": "bet_maker.dto.bet",
        "peekOfCode": "class EventStatusEnum(str, Enum):\n    win = \"1win\"\n    loss = \"2win\"\nclass BetWebhooks(BaseModel):\n    event_id: int\n    event_stat: EventStatusEnum",
        "detail": "bet_maker.dto.bet",
        "documentation": {}
    },
    {
        "label": "BetWebhooks",
        "kind": 6,
        "importPath": "bet_maker.dto.bet",
        "description": "bet_maker.dto.bet",
        "peekOfCode": "class BetWebhooks(BaseModel):\n    event_id: int\n    event_stat: EventStatusEnum",
        "detail": "bet_maker.dto.bet",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "bet_maker.routers.bet_maker",
        "description": "bet_maker.routers.bet_maker",
        "peekOfCode": "logger = logging.getLogger(__name__)\nrouter = APIRouter()\n@router.post('/', tags=[\"bet\"])\nasync def create(data: BetDTO.Bet = None, db: Session = Depends(get_db)):\n    return BetService.create_bet(data, db)\n@router.get('/', tags=[\"bet\"])\nasync def get_bets(db: Session = Depends(get_db)):\n    return BetService.get_bets(db)\n@router.get('/events/', tags=[\"events\"])\nasync def get_events():",
        "detail": "bet_maker.routers.bet_maker",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "bet_maker.routers.bet_maker",
        "description": "bet_maker.routers.bet_maker",
        "peekOfCode": "router = APIRouter()\n@router.post('/', tags=[\"bet\"])\nasync def create(data: BetDTO.Bet = None, db: Session = Depends(get_db)):\n    return BetService.create_bet(data, db)\n@router.get('/', tags=[\"bet\"])\nasync def get_bets(db: Session = Depends(get_db)):\n    return BetService.get_bets(db)\n@router.get('/events/', tags=[\"events\"])\nasync def get_events():\n    url = \"http://line_provider:8001/event/all/\"",
        "detail": "bet_maker.routers.bet_maker",
        "documentation": {}
    },
    {
        "label": "create_bet",
        "kind": 2,
        "importPath": "bet_maker.services.bet_maker",
        "description": "bet_maker.services.bet_maker",
        "peekOfCode": "def create_bet(data: bet.Bet, db: Session):\n    bet = Bet(\n        event_id=data.event_id,\n        amount=data.amount,\n        is_win=\"false\"\n    )\n    try:\n        db.add(bet)\n        db.commit()\n        db.refresh(bet)",
        "detail": "bet_maker.services.bet_maker",
        "documentation": {}
    },
    {
        "label": "get_bets",
        "kind": 2,
        "importPath": "bet_maker.services.bet_maker",
        "description": "bet_maker.services.bet_maker",
        "peekOfCode": "def get_bets(db: Session):\n    return db.query(Bet).all()\ndef update_stat(data: bet.BetWebhooks, db: Session):\n    bets = db.query(Bet).filter(Bet.event_id == data.event_id).all()\n    if not bets:\n        return {\"message\": f\"No bets found for event {data.event_id}\"}\n    is_win = data.event_stat == EventStatusEnum.win\n    for bet in bets:\n        bet.is_win = is_win\n    db.commit()",
        "detail": "bet_maker.services.bet_maker",
        "documentation": {}
    },
    {
        "label": "update_stat",
        "kind": 2,
        "importPath": "bet_maker.services.bet_maker",
        "description": "bet_maker.services.bet_maker",
        "peekOfCode": "def update_stat(data: bet.BetWebhooks, db: Session):\n    bets = db.query(Bet).filter(Bet.event_id == data.event_id).all()\n    if not bets:\n        return {\"message\": f\"No bets found for event {data.event_id}\"}\n    is_win = data.event_stat == EventStatusEnum.win\n    for bet in bets:\n        bet.is_win = is_win\n    db.commit()\n    return {\"message\": f\"Updated {len(bets)} bets for event {data.event_id}\"}\ndef send_request(url):",
        "detail": "bet_maker.services.bet_maker",
        "documentation": {}
    },
    {
        "label": "send_request",
        "kind": 2,
        "importPath": "bet_maker.services.bet_maker",
        "description": "bet_maker.services.bet_maker",
        "peekOfCode": "def send_request(url):\n    response = requests.get(url)\n    return response.json()",
        "detail": "bet_maker.services.bet_maker",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "bet_maker.database",
        "description": "bet_maker.database",
        "peekOfCode": "def get_db():\n    db = Sessionlocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "bet_maker.database",
        "documentation": {}
    },
    {
        "label": "SQLALCHEMY_URL",
        "kind": 5,
        "importPath": "bet_maker.database",
        "description": "bet_maker.database",
        "peekOfCode": "SQLALCHEMY_URL = \"postgresql://pweb:pweb@db1:5432/fast_api_bm\"\nengine = create_engine(SQLALCHEMY_URL)\nSessionlocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\ndef get_db():\n    db = Sessionlocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "bet_maker.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "bet_maker.database",
        "description": "bet_maker.database",
        "peekOfCode": "engine = create_engine(SQLALCHEMY_URL)\nSessionlocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\ndef get_db():\n    db = Sessionlocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "bet_maker.database",
        "documentation": {}
    },
    {
        "label": "Sessionlocal",
        "kind": 5,
        "importPath": "bet_maker.database",
        "description": "bet_maker.database",
        "peekOfCode": "Sessionlocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\ndef get_db():\n    db = Sessionlocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "bet_maker.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "bet_maker.database",
        "description": "bet_maker.database",
        "peekOfCode": "Base = declarative_base()\ndef get_db():\n    db = Sessionlocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "bet_maker.database",
        "documentation": {}
    },
    {
        "label": "Bet",
        "kind": 6,
        "importPath": "bet_maker.models",
        "description": "bet_maker.models",
        "peekOfCode": "class Bet(Base):\n    __tablename__ = \"bets\"\n    id = Column(Integer, primary_key=True, index=True)\n    event_id = Column(Integer, index=True)\n    amount = Column(Float)\n    is_win = Column(Boolean, nullable=True, default=False)",
        "detail": "bet_maker.models",
        "documentation": {}
    },
    {
        "label": "StatusEnum",
        "kind": 6,
        "importPath": "line_provider.dto.event",
        "description": "line_provider.dto.event",
        "peekOfCode": "class StatusEnum(str, Enum):\n    win = \"1win\"\n    lose = \"2win\"\nclass Event(BaseModel):\n    cof: float\n    date_end_of_bets: datetime\n    status: str",
        "detail": "line_provider.dto.event",
        "documentation": {}
    },
    {
        "label": "Event",
        "kind": 6,
        "importPath": "line_provider.dto.event",
        "description": "line_provider.dto.event",
        "peekOfCode": "class Event(BaseModel):\n    cof: float\n    date_end_of_bets: datetime\n    status: str",
        "detail": "line_provider.dto.event",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "line_provider.routers.line_provider",
        "description": "line_provider.routers.line_provider",
        "peekOfCode": "router = APIRouter()\n@router.post('/', tags=[\"event\"])\nasync def create(data: EventDTO.Event, db: Session = Depends(get_db)):\n    try:\n        return EventService.create_event(data, db)\n    except Exception as e:\n        raise HTTPException(status_code=400, detail=str(e))\n@router.get('/all/', tags=[\"event\"])\nasync def get_events(db: Session = Depends(get_db)):\n    return EventService.get_events(db)",
        "detail": "line_provider.routers.line_provider",
        "documentation": {}
    },
    {
        "label": "create_event",
        "kind": 2,
        "importPath": "line_provider.services.line_provider",
        "description": "line_provider.services.line_provider",
        "peekOfCode": "def create_event(data: EventDTO.Event, db: Session):\n    event = Event(\n        date_end_of_bets=data.date_end_of_bets,\n        status=\"pending\",\n        cof = data.cof\n    )\n    try:\n        db.add(event)\n        db.commit()\n        db.refresh(event)",
        "detail": "line_provider.services.line_provider",
        "documentation": {}
    },
    {
        "label": "get_event",
        "kind": 2,
        "importPath": "line_provider.services.line_provider",
        "description": "line_provider.services.line_provider",
        "peekOfCode": "def get_event(id: int, db: Session):\n    return db.query(Event).filter(Event.id == id).first()\ndef get_events(db: Session):\n    return db.query(Event).filter(Event.date_end_of_bets >= datetime.now()).all()\ndef send_webhook(event_id: int, event_stat: str):\n    payload = {\n        \"event_id\": event_id,\n        \"event_stat\": event_stat\n    }\n    try:",
        "detail": "line_provider.services.line_provider",
        "documentation": {}
    },
    {
        "label": "get_events",
        "kind": 2,
        "importPath": "line_provider.services.line_provider",
        "description": "line_provider.services.line_provider",
        "peekOfCode": "def get_events(db: Session):\n    return db.query(Event).filter(Event.date_end_of_bets >= datetime.now()).all()\ndef send_webhook(event_id: int, event_stat: str):\n    payload = {\n        \"event_id\": event_id,\n        \"event_stat\": event_stat\n    }\n    try:\n        response = requests.post(BET_MAKER_WEBHOOK_URL, json=payload, timeout=5)\n        response.raise_for_status()",
        "detail": "line_provider.services.line_provider",
        "documentation": {}
    },
    {
        "label": "send_webhook",
        "kind": 2,
        "importPath": "line_provider.services.line_provider",
        "description": "line_provider.services.line_provider",
        "peekOfCode": "def send_webhook(event_id: int, event_stat: str):\n    payload = {\n        \"event_id\": event_id,\n        \"event_stat\": event_stat\n    }\n    try:\n        response = requests.post(BET_MAKER_WEBHOOK_URL, json=payload, timeout=5)\n        response.raise_for_status()\n        print(f\"Webhook sent successfully: {payload}\")\n    except requests.RequestException as e:",
        "detail": "line_provider.services.line_provider",
        "documentation": {}
    },
    {
        "label": "update",
        "kind": 2,
        "importPath": "line_provider.services.line_provider",
        "description": "line_provider.services.line_provider",
        "peekOfCode": "def update(data: EventDTO.Event, db: Session, id: int):\n    event = db.query(Event).filter(Event.id == id).first()\n    if event:\n        event.date_end_of_bets = data.date_end_of_bets\n        event.status = data.status\n        event.cof = data.cof\n        db.commit()\n        db.refresh(event)\n        if event.status == \"1win\" or \"2win\":\n            send_webhook(event.id, event.status)",
        "detail": "line_provider.services.line_provider",
        "documentation": {}
    },
    {
        "label": "remove",
        "kind": 2,
        "importPath": "line_provider.services.line_provider",
        "description": "line_provider.services.line_provider",
        "peekOfCode": "def remove(db: Session, id: int):\n    event = db.query(Event).filter(Event.id == id).first()\n    if event:\n        db.delete(event)\n        db.commit()\n        return {\"message\": \"Event deleted successfully\"}\n    else:\n        raise ValueError(f\"Event with ID {id} not found\")",
        "detail": "line_provider.services.line_provider",
        "documentation": {}
    },
    {
        "label": "BET_MAKER_WEBHOOK_URL",
        "kind": 5,
        "importPath": "line_provider.services.line_provider",
        "description": "line_provider.services.line_provider",
        "peekOfCode": "BET_MAKER_WEBHOOK_URL = \"http://bet_maker:8000/bet/webhook/\"\ndef create_event(data: EventDTO.Event, db: Session):\n    event = Event(\n        date_end_of_bets=data.date_end_of_bets,\n        status=\"pending\",\n        cof = data.cof\n    )\n    try:\n        db.add(event)\n        db.commit()",
        "detail": "line_provider.services.line_provider",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "line_provider.database",
        "description": "line_provider.database",
        "peekOfCode": "def get_db():\n    db = Sessionlocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "line_provider.database",
        "documentation": {}
    },
    {
        "label": "SQLALCHEMY_URL",
        "kind": 5,
        "importPath": "line_provider.database",
        "description": "line_provider.database",
        "peekOfCode": "SQLALCHEMY_URL = \"postgresql://pweb:pweb@db2:5432/fast_api_lp\"\nengine = create_engine(SQLALCHEMY_URL)\nSessionlocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\ndef get_db():\n    db = Sessionlocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "line_provider.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "line_provider.database",
        "description": "line_provider.database",
        "peekOfCode": "engine = create_engine(SQLALCHEMY_URL)\nSessionlocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\ndef get_db():\n    db = Sessionlocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "line_provider.database",
        "documentation": {}
    },
    {
        "label": "Sessionlocal",
        "kind": 5,
        "importPath": "line_provider.database",
        "description": "line_provider.database",
        "peekOfCode": "Sessionlocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\ndef get_db():\n    db = Sessionlocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "line_provider.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "line_provider.database",
        "description": "line_provider.database",
        "peekOfCode": "Base = declarative_base()\ndef get_db():\n    db = Sessionlocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "line_provider.database",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "line_provider.main",
        "description": "line_provider.main",
        "peekOfCode": "app = FastAPI()\napp.include_router(LineRouter.router, prefix=\"/event\")\nif __name__ == '__main__':\n    uvicorn.run(\"main:app\", host='0.0.0.0',port=8001,reload=True,workers=2)\n    print(\"---\")",
        "detail": "line_provider.main",
        "documentation": {}
    },
    {
        "label": "Event",
        "kind": 6,
        "importPath": "line_provider.models",
        "description": "line_provider.models",
        "peekOfCode": "class Event(Base):\n    __tablename__ = \"events\"\n    id = Column(Integer, primary_key=True, index=True)\n    cof = Column(DECIMAL(10, 2), CheckConstraint('cof >= 0'),index=True)\n    date_end_of_bets = Column(DateTime, CheckConstraint('date_end_of_bets >= CURRENT_TIMESTAMP'), index=True)\n    status = Column(String, default=\"pending\")",
        "detail": "line_provider.models",
        "documentation": {}
    }
]